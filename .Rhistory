# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
k
eigen_decom$vectors
eigen_decom
n
tol <- 1e-8
d.order <- list()
for (i in 1:100) { # i <- 1
print(i)
n <- sample(2:500,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
tt
svd(mat)
cor(svd_rotation$u[,1], new_rotation$u[,1])
# compare new to svd rotation
svd_rotation <- svd(mat)
cor(svd_rotation$u[,1], new_rotation$u[,1])
correlate
tol <- 1e-8
d.order <- correlate <- variance <- list()
diag(var(cor(svd_rotation$u[,1], new_rotation$u[,1])))
diag(var(svd_rotation$u[,1], new_rotation$u[,1]))
cbind(var(svd_rotation$u[,1]), var(new_rotation$u[,1]))
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:500,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(var(svd_rotation$u[,1]), var(new_rotation$u[,1]))
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
correlate
k
n
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:500,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(var(svd_rotation$u[,1]), var(new_rotation$u[,1]))
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
correlate
variance
svd_rotation$d[1]
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:500,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(svd_rotation$d[1], new_rotation$d[1])
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
variance
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:500,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0, max = 0.5)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(svd_rotation$d[1], new_rotation$d[1])
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
correlate
variance
svd_rotation$u[,1]
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:20,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(svd_rotation$d[1], new_rotation$d[1])
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:20,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(svd_rotation$d[1], new_rotation$d[1])
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
k
n
sample(2:n,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
sample(2:n,1)
sample(2:n,1)
sample(2:n,1)
sample(2:n,1)
tol <- 1e-8
d.order <- correlate <- variance <- list()
for (i in 1:10) { # i <- 1
print(i)
n <- sample(2:20,1)
k <- sample(2:n,1)
base_cor <- runif(1, min = 0.5, max = 1)
cor_mat <- struc_cor_mat(n = n,
base.cor = base_cor,
rank = k)
eigen_decom <- eigen(cor_mat, symmetric = T)
mat <- eigen_decom$vectors[,1:k] %*% diag(sqrt(eigen_decom$values[1:k]))
new_rotation <- drotate(mat)
# compare new to svd rotation
svd_rotation <- svd(mat)
correlate[[i]] <- cor(svd_rotation$u[,1], new_rotation$u[,1])
variance[[i]] <- cbind(svd_rotation$d[1], new_rotation$d[1])
# check for equivalence
if (max(abs(new_rotation$u %*% diag(new_rotation$d) %*% t(new_rotation$v) - mat)) > tol) stop("rotation and original matrix different")
# check main effect variance
if (abs(colMeans(new_rotation$u %*% diag(new_rotation$d))[1]^2  - sum(colMeans(mat)^2)) > tol) stop("first factor mean does not equal main effect variance")
# check for orthogonal rotation matrices
if (max(abs(diag(1, nrow = k) - new_rotation$v %*% t(new_rotation$v))) > tol) stop("VV' is not diagonal")
if (max(abs(diag(1, nrow = k) - t(new_rotation$v) %*% new_rotation$v)) > tol) stop("V'V is not diagonal")
if (max(abs(rep(1,k) - diag(t(new_rotation$u) %*% new_rotation$u))) > tol) stop("U'U is not orthogonal")
tt <- t(new_rotation$u) %*% new_rotation$u
print(max(abs(tt[upper.tri(tt)])))
# compare to full way
sig12 <- mat %*% colMeans(mat)
Lam1 <- sig12/sqrt(sum(sig12^2))
if (max(abs(new_rotation$u[,1] - Lam1)) > tol) stop("first factor not equal to full way")
if (k > 1) {
# check ordering of d
if (any(rev(order(new_rotation$d[-1])) - 1:(k-1) != 0)) warning("higher order factors not sorted in decreasing order")
d.order[[i]] <- rev(order(new_rotation$d))
if (max(abs(colMeans(new_rotation$u)[-1])) > tol) stop("higher order factors dont sum to zero")
Lam2 <- mat - sig12 %*% colMeans(mat)/sum(colMeans(mat)^2)
# Lam2 <- Lam2 %*% diag(1/sqrt(diag(t(Lam2) %*% Lam2)))
# plot(new_rotation$u[,1], -Lam2[,1])
# plot(new_rotation$u[,4], Lam2[,3])
# correlate higher order factors with first factor
# and svd rotation
new_rotation <- drotate(mat, svd = TRUE)
tt <- sign(new_rotation$u[1,-1]/svd(Lam2)$u[1,1:(ncol(mat)-1)])
if(max(abs(svd(Lam2)$u[,1:(ncol(mat)-1)] %*% diag(tt, nrow = (ncol(mat)-1)) - new_rotation$u[,-1])) > tol) stop("svd rotation does not match")
}
}
correlate
variance
mat
svd_rotation$u
new_rotation$u
skew_diag_mat(n = n)
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
Matrix::rankMatrix(cbind(1, matrix(rnorm(100), ncol = 5)))
cbind(1, matrix(rnorm(100), ncol = 5))
Matrix::rankMatrix(tt <- cbind(1, matrix(rnorm(100), ncol = 5)))
Matrix::rankMatrix(cbind(1, diag(5)))
diag(5)
Matrix::rankMatrix(cbind(1, diag(5)))
22/30
68*3
is.vector(F)
length(F)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(
mat = cor_mat,
group.df = F,
order = TRUE,
labels = TRUE
)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(
mat = cor_mat,
group.df = NULL,
order = TRUE,
labels = TRUE
)
cor_mat
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
devtools::load_all()
devtools::build_vignettes()
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document() # only need down to here for altering functions
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
devtools::build_manual()
# can check the package on multiple OS (interactive choice when run)
# Takes quite long.
#use_gpl_license()  # when first creating a package, decide which license to use.
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
## Most recent recommended testing pipeline
usethis::use_github_links()
devtools::spell_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
source("~/Documents/EIB/0FieldSimR/0UnderDevelopment/drotate_orig.R")
Thanks Chris!
x
