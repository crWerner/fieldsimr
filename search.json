[{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"document demonstrates simulate genetic values multiple traits multiple environments based compound symmetry model genotype--environment (GxE) interaction, assuming separable structure traits environments. simulation genetic values directly implemented ‘FieldSimR’, package provides wrapper functions facilitate simulation genetic values multi-environment field trial settings employing R package ‘AlphaSimR’. two wrapper functions simulate genetic values based compound symmetry GxE interaction model : compsym_asr_input() compsym_asr_output()  Note: ‘FieldSimR’ also provides wrapper functions enable simulation genetic values based unstructured model genotype--environment (GxE) interaction. demonstrated vignette Simulation genetic values based unstructured model genotype--environment (GxE) interaction. core function ‘FieldSimR’ generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1). combination plot errors (simulated) genetic values, ‘FieldSimR’ enables simulation multi-environment plant breeding trials plot. demonstrated vignette Simulation plot errors phenotypes plant breeding field trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"simulation-of-genetic-values","dir":"Articles","previous_headings":"","what":"Simulation of genetic values","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three environments. first third environment include two replicated, second environment includes three replicates simulation process comprises three steps: Definition genetic architecture simulation parameters two traits. Simulation population 100 hybrid genotypes. Generation data frame containing simulated genetic values grain yield plant height three environments.. provide comprehensive overview compound symmetry modelling approach GxE interaction, assume additive dominance gene action grain yield plant height. Details ‘AlphaSimR’ simulates additive non-additive biological effects can found “Traits AlphaSimR” vignette. noted, however, simple additive genetic model sufficient answer experimental questions may preferred complex models, especially data tune simulation model available parameters unknown.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"genetic-architecture-and-simulation-parameters-of-the-two-traits","dir":"Articles","previous_headings":"","what":"1. Genetic architecture and simulation parameters of the two traits","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"First, set number traits, number environments (e.g., locations), number replicates tested within environments. also define number genotypes founder population simulated, number chromosomes, number segregating sites (biallelic QTN) per chromosome. , set additive genetic parameters, dominance parameters, genetic correlation structures required simulate two traits three environments based compound symmetry model GxE interaction. create founder population 20 heterozygous genotypes. founder genotypes split two heterotic pools, one doubled haploid (DH) line produced founder. generate hybrids, two pools crossed using factorial design.","code":"ntraits <- 2 # Number of traits. nenvs <- 3 # Number of environments. nreps <- c(2, 2, 3) # Number of replicates of each genotype in environments 1, 2, and 3.   nind <- 20 # Number of founder genotypes in the population. nchr <- 10 # Number of chromosomes. nseg_sites <- 200 # Number of QTN per chromosome."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"additive-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Additive genetic parameters","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"define mean additive genetic values trait x environment combinations. additive mean values provided single vector environments nested within traits. Grain yield measured tons per hectare (t/ha) plant height measured centimetres (cm).  Simulated traits restricted compound symmetry model genetic variance environment (genotype main effect variance + GxE interaction variance) genetic covariance pair environments (genotype main effect variance).  proportion main effect variance trait also defines total genetic correlation environments compound symmetry model.  Additive genetic correlations two traits set 2x2 correlation matrix.","code":"mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) var <- c(0.08, 13) # c(grain yield, plant height) prop_main <- c(0.4, 0.6) # c(grain yield, plant height) corA <- matrix( # Matrix of additive genetic correlations grain yield and plant height.   c(     1.0, 0.5,     0.5, 1.0   ),   ncol = 2 ) #>      [,1] [,2] #> [1,]  1.0  0.5 #> [2,]  0.5  1.0"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"dominance-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Dominance genetic parameters","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"Dominance degrees dominance degree variances two traits defined way. assume independence dominance degrees grain yield plant height. Therefore, generate 2x2 diagonal matrix (although strictly necessary. diagonal matrix constructed default correlation matrix provided).","code":"meanDD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)  varDD <- c(0.2, 0.2) # c(grain yield, plant height)  prop_mainDD <- 0.4 # Same value set for traits 1 and 2.  corDD <- diag(2) #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"input-parameter-list","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Input parameter list","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"defined simulation parameters, use function compsym_asr_input() prepare list used ‘AlphaSimR’ simulate correlated genetic values based compound symmetry model GxE interaction. Note: object input_asr modified must used directly ‘AlphaSimR’ demonstrated .","code":"input_asr <- compsym_asr_input(   ntraits = ntraits,   nenvs = nenvs,   mean = mean,   var = var,   prop.main = prop_main,   corA = corA,   meanDD = meanDD,   varDD = varDD,   prop.mainDD = prop_mainDD,   corDD = corDD )"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"simulation-of-a-population-of-genotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of a population of genotypes","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"list simulation parameters input_asr now used ‘AlphaSimR’ simulate correlated genetic values 100 maize hybrid genotypes tested two traits three environments based compound symmetry model GxE interaction. First, simulate population 20 heterozygous maize founder genotypes using function runMacs ‘AlphaSimR’.  , use simulation parameters stored input_asr simulate correlated genetic values grain yield plant height three testing environments.  now split simulated founders two heterotic pools B. create one DH line per founder, gives us 10 DH lines per heterotic pool. Hybrids generated crossing pool pool B factorial manner (pairwise combinations), resulting 100 hybrid genotypes","code":"founders <- runMacs( # Simulation of founder genotypes using AlphaSimR's \"MAIZE\" presets   nInd = nind, # to mimic the species' evolutionary history.   nChr = nchr,   segSites = nseg_sites,   species = \"MAIZE\",   nThreads = 2 )  SP <- SimParam$new(founders) SP$addTraitAD( # Additive + dominance trait simulation.   nQtlPerChr = nseg_sites,   mean = input_asr$mean,   var = input_asr$var,   corA = input_asr$corA,   meanDD = input_asr$meanDD,   varDD = input_asr$varDD,   corDD = input_asr$corDD,   useVarA = FALSE )  founders <- newPop(founders) pool_A <- makeDH(founders[1:10], nDH = 1) # Pool A: 1 DH line from founders 1 to 10, respectively. pool_B <- makeDH(founders[11:20], nDH = 1) # Pool B: 1 DH line from founders 11 to 20, respectively.  dh_lines <- mergePops(list(pool_A, pool_B))  factorial_plan <- as.matrix(expand.grid(A = pool_A@id, B = pool_B@id)) # Factorial crossing plan.  hybrid_pop <- makeCross(pop = dh_lines, crossPlan = factorial_plan, nProgeny = 1) # Hybrid genotypes."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"generation-of-a-data-frame-with-simulated-genetic-values","dir":"Articles","previous_headings":"","what":"3. Generation of a data frame with simulated genetic values","title":"Simulation of genetic values based on a compound symmetry model for genotype-by-environment (GxE) interaction","text":"last step, use function compsym_asr_output() extract simulated genetic values ‘AlphaSimR’ population object hybrid_pop store data frame.  Histogram showing genetic values 100 maize hybrids grain yield three environments   simulated genetic values grain yield protein content measured three environments can now combined plot errors generate plant breeding trial phenotype data plot. provide example vignette Simulation plot errors phenotypes plant breeding field trial.","code":"gv_df <- compsym_asr_output(   pop = hybrid_pop,   ntraits = ntraits,   nenvs = nenvs,   nreps = nreps ) #>   env id rep gv.Trait1 gv.Trait2 #> 1   1 41   1  4.950151  240.2851 #> 2   1 42   1  5.255610  241.7421 #> 3   1 43   1  5.215257  243.7527 #> 4   1 44   1  5.037227  241.8828 #> 5   1 45   1  5.411996  241.9673 #> 6   1 46   1  5.271031  243.5355 ggplot(gv_df, aes(x = gv.Trait1, fill = factor(env))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Genetic values for grain yield (t/ha)\", y = \"Count\", fill = \"Environment\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"R package ‘FieldSimR’ enables simulation multi-environment plant breeding trial phenotypes simulation plot errors subsequent combination (simulated) genetic values. core function generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1).three error terms combined user-deﬁned ratio. document demonstrates : Simulate plot errors multiple traits tested multiple environments, Simulate phenotypes combination plot errors simulated genetic values.  simulation plot errors requires specification various simulation parameters define: field trial layout total error variance spatial error Extraneous variation  Phenotypes simulated combination plot errors genetic values stored package’s example data frame gv_df_unstr. data frame contains simulated genetic values two traits three environments based unstructured model genotype--environment (GxE) interaction. simulation genetic values shown vignette Simulation genetic values based unstructured model genotype--environment (GxE) interaction.","code":""},{"path":[]},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"field-trial-layout","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.1 Field trial layout","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three environments. first third environment include two blocks, second environment includes three blocks. block comprises 20 rows 5 columns. blocks arranged column direction (“side--side”). plot length (column direction) 8 meters, plot width (row direction) 2 meters. Note: plot_length plot_width required spatial_model = \"Bivariate\". two arguments used set x-coordinates y-coordinates required bivariate interpolation algorithm model spatial correlation plots. Therefore, assumed unit length (meters ) actual meaning, ratio plot_length plot_width important rather absolute values. recommend use realistic, absolute values plot_length plot_width regardless unit length. spatially correlated errors simulated based two-dimensional autoregressive process (AR1:AR1), col_cor row_cor defined instead.","code":"ntraits <- 2 # Number of traits nenvs <- 3 # Number of environments nblocks <- c(2, 2, 3) # Number of blocks per environment block_dir <- \"col\" # Arrangement of blocks (\"side-by-side\") ncols <- c(10, 10, 15) # Number of columns per environment nrows <- 20 # Number of rows per environment plot_length <- 8 # Plot length; here in meters (column direction) plot_width <- 2 # Plot width; here in meters (row direction)"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"total-error","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.2 Total error","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"obtain pre-defined target heritabilities plot-level, need define total error variances two simulated traits relative genetic variances. assume broad-sense heritabilities plot level H2 = 0.3 grain yield H2 = 0.5 plant height three environments. heritabilities six trait x environment combinations stored single vector.  total genetic variances six trait x environment combinations (environments nested within traits) can extracted description simulation genetic values FieldSimR::unstructured_GxE_demo.  now create simple function calculate total error variances based pre-defined target heritabilities vector H2and total genetic variances var.","code":"H2 <- c(0.3, 0.3, 0.3, 0.5, 0.5, 0.5) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) var <- c(0.086, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) # Calculation of error variances based on the genetic variance and target heritability vectors. calc_varR <- function(var, H2) {   varR <- (var / H2) - var   return(varR) }  varR <- calc_varR(var, H2) round(varR, 2) # Vector of error variances: c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) #> [1]  0.20  0.28  0.14 15.10  8.50 11.70"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"spatial-error","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.3 Spatial error","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"simulate spatial error term using bivariate interpolation assume proportion spatial error variance total error variance 0.4 three environments. Additionally, assume correlation spatial error two traits. However, since information magnitude correlation, randomly sample value 0 0.5.","code":"spatial_model <- \"Bivariate\" # Spatial error model. prop_spatial <- 0.4 # Proportion of spatial trend.  ScorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE) #> 'cor_mat' is already positive (semi)-definite, matrix was not altered round(ScorR, 2) #>      1    2 #> 1 1.00 0.04 #> 2 0.04 1.00"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"extraneous-variation","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.4 Extraneous variation","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"Extraneous effects can, example, result trial management procedures row /column direction, soil tillage, sowing harvesting. want simulate extraneous variation row direction assume proportion extraneous error variance total error variance 0.2. assume correlation error two traits extraneous variation randomly sample value 0 0.5. Note: proportion random error variance total error variance defined 1 - (prop_spatial + prop_ext). Hence, prop_spatial prop_ext set reference random error, sum two proportions must greater 1.","code":"ext_ord <- \"zig-zag\" ext_dir <- \"row\" prop_ext <- 0.2  EcorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE) #> 'cor_mat' is already positive (semi)-definite, matrix was not altered round(EcorR, 2) #>      1    2 #> 1 1.00 0.42 #> 2 0.42 1.00"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"simulation-of-plot-errors-1","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.5 Simulation of plot errors","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"Finally, use parameters defined function field_trial_error() simulate plot errors grain yield plant height three test environments: Note: default, function field_trial_error() generates data frame following columns: environment id (environment), block id, column id, row id, total plot error trait. return_effects = TRUE, ‘FieldSimR’ returns list additional entry trait containing spatial error, extraneous effect random error.  now plot total error grain yield (“e.Trait1”) Environment 1, well spatial error component, random error component, extraneous variation. Therefore, first extract required data error_df create individual graphic four simulated error terms.  Total plot error   Spatial error simulated using bivariate interpolation   Random error   Extraneous variation row direction","code":"error_ls <- field_trial_error(   ntraits = ntraits,   nenvs = nenvs,   nblocks = nblocks,   block.dir = block_dir,   ncols = ncols,   nrows = nrows,   plot.length = plot_length,   plot.width = plot_width,   varR = varR,   ScorR = ScorR,   EcorR = EcorR,   RcorR = NULL,   spatial.model = spatial_model,   prop.spatial = prop_spatial,   ext.ord = ext_ord,   ext.dir = ext_dir,   prop.ext = prop_ext,   return.effects = TRUE ) e_total_env1 <- error_ls$error.df[error_ls$error.df$env == 1, ] e_terms_env1 <- error_ls$Trait1[error_ls$Trait1$env == 1, ] plot_effects(e_total_env1, effect = \"e.Trait1\", labels = TRUE) plot_effects(e_terms_env1, effect = \"e.spat\", labels = TRUE) plot_effects(e_terms_env1, effect = \"e.rand\", labels = TRUE) plot_effects(e_terms_env1, effect = \"e.ext.row\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_variation_demo.html","id":"simulation-of-plot-level-phenotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of plot-level phenotypes","title":"Simulation of plot errors and phenotypes in a plant breeding field trial","text":"simulate grain yield plant height phenotypes multi-environment maize experiment, now combine simulated plot errors genetic values stored example data frame gv_df_unstr. done using function make_phenotypes(), allocates genotypes plots within blocks according randomized complete block design (RCBD). Note: complex field designs require allocation genotypes plots using external R package software.  Simulated phenotypes   Histogram showing phenotypes 100 maize hybrids grain yield two blocks Environment 1","code":"gv_df <- gv_df_unstr  pheno_df <- make_phenotypes(   gv_df,   error_ls$error.df,   randomise = TRUE )  pheno_env1 <- pheno_df[pheno_df$env == 1, ] # Extract phenotypes in environment 1. plot_effects(pheno_env1, effect = \"y.Trait1\") ggplot(pheno_env1, aes(x = y.Trait1, fill = factor(block))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Phenotypes for grain yield (t/ha)\", y = \"Count\", fill = \"Block\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"document demonstrates simulate genetic values multiple traits multiple environments based unstructured model genotype--environment (GxE) interaction. simulation genetic values directly implemented ‘FieldSimR’, package provides wrapper functions facilitate simulation genetic values multi-environment field trial settings employing R package ‘AlphaSimR’. two wrapper functions simulate genetic values based unstructured model GxE interaction : unstr_asr_input() unstr_asr_output()  Note: ‘FieldSimR’ also provides wrapper functions enable simulation genetic values using compound symmetry model GxE interaction. demonstrated vignette Simulation genetic values based compound symmetry model genotype--environment (GxE) interaction. core function ‘FieldSimR’ generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1). combination plot errors (simulated) genetic values, ‘FieldSimR’ enables simulation multi-environment plant breeding trials plot. demonstrated vignette Simulation plot errors phenotypes plant breeding field trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"simulation-of-genetic-values","dir":"Articles","previous_headings":"","what":"Simulation of genetic values","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three environments. first third location include two replicates, third location includes three replicates. simulation process comprises three steps: Definition genetic architecture simulation parameters two traits. Simulation population 100 hybrid genotypes. Generation data frame containing simulated genetic values grain yield plant height three environments. provide comprehensive overview unstructured modelling approach GxE interaction, assume additive dominance gene action grain yield plant height. Details ‘AlphaSimR’ simulates additive non-additive biological effects can found “Traits AlphaSimR” vignette. noted, however, simple additive genetic model sufficient answer experimental questions may preferred complex models, especially data tune simulation model available parameters unknown.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"genetic-architecture-and-simulation-parameters-of-the-two-traits","dir":"Articles","previous_headings":"","what":"1. Genetic architecture and simulation parameters of the two traits","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"First, set number traits, number environments (e.g., locations), number replicates tested within environments. also define number genotypes founder population simulated, number chromosomes, number segregating sites (biallelic QTN) per chromosome. , set additive genetic parameters, dominance parameters, genetic correlation structures required simulate two traits three environments based unstructured model GxE interaction. create founder population 20 heterozygous genotypes. founder genotypes split two heterotic pools, one doubled haploid (DH) line produced founder. generate hybrids, two pools crossed using factorial design.","code":"ntraits <- 2 # Number of traits. nenvs <- 3 # Number of environments. nreps <- c(2, 2, 3) # Number of replicates tested within environments 1, 2 and 3.   nind <- 20 # Number of founder genotypes in the population. nchr <- 10 # Number of chromosomes. nseg_sites <- 200 # Number of QTN per chromosome."},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"additive-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Additive genetic parameters","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"define mean additive genetic values trait x environment combinations. additive mean values provided single vector environments nested within traits. Grain yield measured tons per hectare (t/ha) plant height measured centimetres (cm).  genetic variances six trait x environment combinations can set two different ways. providing single vector environments nested within traits (similar vector mean). providing vector genetic variances two traits (T_var) second vector genetic variances three environments (E_var), assuming separable structure. choose first option provide single vector variances.","code":"mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # c(Yld:E1, Yld:E2, Yld:E3, Prt:E1, Prt:E2, Prt:E3) var <- c(0.085, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"dominance-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Dominance genetic parameters","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"assume mean dominance degrees 0.4 grain yield 0.1 plant height three environments, respectively. dominance degree variance set 0.2 traits three environments.","code":"meanDD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) varDD <- 0.2 # Same value set for all environment-within-trait combinations"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"genetic-correlation-structures","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Genetic correlation structures","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"Additive non-additive genetic correlations trait x environment combinations can defined two ways: providing single correlation structure (corA). providing matrix genetic correlations traits (TcorA) matrix genetic correlations environments (EcorA), assuming separable correlation structure. choose second option assume separable additive genetic correlation structure. simplifies generation additive correlation matrix, especially number environments /traits high.  Alternatively, function rand_cor_mat() provides quick means generate random correlation matrices. correlations sampled within defined range values.  Furthermore, assume independence dominance degrees six trait--environment combinations. Therefore, generate 6x6 diagonal matrix (although strictly necessary. diagonal matrix constructed default correlation matrix provided).","code":"TcorA <- matrix( # Matrix of additive genetic correlations between the two traits.   c(     1.0, 0.6,     0.6, 1.0   ),   ncol = 2 ) #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 EcorA <- matrix(   c( # Matrix of additive genetic correlations between the three environments.     1.0, 0.4, 0.6,     0.4, 1.0, 0.5,     0.6, 0.5, 1.0   ),   ncol = 3 ) #>      [,1] [,2] [,3] #> [1,]  1.0  0.4  0.6 #> [2,]  0.4  1.0  0.5 #> [3,]  0.6  0.5  1.0 corA <- rand_cor_mat( # Additive genetic correlation structure.   (ntraits * nenvs), # Could be used instead of TcorA and EcorA.   min.cor = 0.1,   max.cor = 0.9,   pos.def = TRUE )  round(corA, 2) #>      1    2    3    4    5    6 #> 1 1.00 0.17 0.74 0.59 0.25 0.10 #> 2 0.17 1.00 0.46 0.50 0.34 0.68 #> 3 0.74 0.46 1.00 0.68 0.74 0.27 #> 4 0.59 0.50 0.68 1.00 0.15 0.34 #> 5 0.25 0.34 0.74 0.15 1.00 0.40 #> 6 0.10 0.68 0.27 0.34 0.40 1.00 corDD <- diag(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    0    0    0 #> [2,]    0    1    0    0    0    0 #> [3,]    0    0    1    0    0    0 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    0 #> [6,]    0    0    0    0    0    1"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"input-parameter-list","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Input parameter list","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"defined simulation parameters, use function unstr_asr_input() prepare list used ‘AlphaSimR’ simulate correlated genetic values based unstructured model GxE interaction. Note: object input_asr modified must used directly ‘AlphaSimR’ demonstrated .","code":"input_asr <- unstr_asr_input(   ntraits = ntraits,   nenvs = nenvs,   mean = mean,   var = var,   TcorA = TcorA,   EcorA = EcorA,   meanDD = meanDD,   varDD = varDD,   corDD = corDD )"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"simulation-of-a-population-of-genotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of a population of genotypes","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"list simulation parameters input_asr now used ‘AlphaSimR’ simulate correlated genetic values 100 maize hybrid genotypes tested two traits three environments based unstructured model GxE interaction. First, simulate population 20 heterozygous maize founder genotypes using function runMacs ‘AlphaSimR’.  , use simulation parameters stored input_asr simulate correlated genetic values grain yield plant height three testing environments.  now split simulated founders two heterotic pools B. create one DH line per founder, gives us 10 DH lines per heterotic pool. Hybrids generated crossing pool pool B factorial manner (pairwise combinations), resulting 100 hybrid genotypes","code":"founders <- runMacs( # Simulation of founder genotypes using AlphaSimR's \"MAIZE\" presets   nInd = nind, # to mimic the species' evolutionary history.   nChr = nchr,   segSites = nseg_sites,   inbred = FALSE,   species = \"MAIZE\",   nThreads = 2 )  SP <- SimParam$new(founders) SP$addTraitAD( # Additive + dominance trait simulation.   nQtlPerChr = nseg_sites,   mean = input_asr$mean,   var = input_asr$var,   corA = input_asr$corA,   meanDD = input_asr$meanDD,   varDD = input_asr$varDD,   corDD = input_asr$corDD,   useVarA = FALSE )  founders <- newPop(founders) pool_A <- makeDH(founders[1:10], nDH = 1) # Pool A: 1 DH line from founders 1 to 10, respectively. pool_B <- makeDH(founders[11:20], nDH = 1) # Pool B: 1 DH line from founders 11 to 20, respectively.  dh_lines <- mergePops(list(pool_A, pool_B))  factorial_plan <- as.matrix(expand.grid(A = pool_A@id, B = pool_B@id)) # Factorial crossing plan.  hybrid_pop <- makeCross(pop = dh_lines, crossPlan = factorial_plan, nProgeny = 1) # Hybrid genotypes."},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"generation-of-a-data-frame-with-simulated-genetic-values","dir":"Articles","previous_headings":"","what":"3. Generation of a data frame with simulated genetic values","title":"Simulation of genetic values based on an unstructured model for genotype-by-environment (GxE) interaction","text":"last step, use function unstr_asr_output() extract simulated genetic values ‘AlphaSimR’ population object hybrid_pop store data frame.  Histogram showing genetic values 100 maize hybrids grain yield three environments   simulated genetic values grain yield plant height measured three environments can now combined plot errors generate plant breeding trial phenotype plot data. provide example vignette Simulation plot errors phenotypes plant breeding field trial.","code":"gv_df <- unstr_asr_output(   pop = hybrid_pop,   ntraits = ntraits,   nenvs = nenvs,   nreps = nreps ) #>   env id rep gv.Trait1 gv.Trait2 #> 1   1 41   1  5.198341  236.3639 #> 2   1 42   1  4.783930  234.5570 #> 3   1 43   1  5.299496  238.1083 #> 4   1 44   1  5.240592  236.1194 #> 5   1 45   1  5.141678  239.7412 #> 6   1 46   1  5.251960  234.9414 ggplot(gv_df, aes(x = gv.Trait1, fill = factor(env))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Genetic values for grain yield (t/ha)\", y = \"Count\", fill = \"Environment\")"},{"path":"https://crwerner.github.io/fieldsimr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christian Werner. Author, maintainer. Daniel Tolhurst. Author. Jon Bancic. Contributor.","code":""},{"path":"https://crwerner.github.io/fieldsimr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Werner C, Tolhurst D (2025). FieldSimR: Simulation Plot Errors Phenotypes Plant Breeding Field Trials. R package version 1.4.1, https://crwerner.github.io/fieldsimr/, https://github.com/crWerner/fieldsimr.","code":"@Manual{,   title = {FieldSimR: Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials},   author = {Christian Werner and Daniel Tolhurst},   year = {2025},   note = {R package version 1.4.1,     https://crwerner.github.io/fieldsimr/},   url = {https://github.com/crWerner/fieldsimr}, }"},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"fieldsimr","dir":"","previous_headings":"","what":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"FieldSimR R package simulating plot data multi-environment field trials one traits. core function generates plot errors capture: spatial trend, random error (noise), extraneous variation. Spatial trend simulated using bivariate interpolation separable first order autoregressive (AR1) process. Random error simulated using independent process. Extraneous variation simulated using random zig-zag ordering neighbouring columns /rows. three error components combined user-defined ratio. Phenotypes can generated combining plot errors genetic values (e.g., true, simulated, predicted). FieldSimR provides wrapper functions simulate correlated genetic values capture genotype--environment (GxE) interaction R package AlphaSimR.","code":""},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"FieldSimR available CRAN. install use:","code":"install.packages(\"FieldSimR\")"},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"Simulation genetic values based compound symmetry model GxE interaction Simulation genetic values based unstructured model GxE interaction Simulation plot errors phenotypes plant breeding field trial","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"Creates list input parameters `AlphaSimR` simulate genetic values multiple environments one traits based compound symmetry model genotype--environment (GxE) interaction.  function utilises ability `AlphaSimR` simulate correlated traits. wrapper function compsym_asr_input() used specify input parameters required `AlphaSimR`. simulating genetic values, wrapper function compsym_asr_output can used generate data frame output values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"","code":"compsym_asr_input(   ntraits = 1,   nenvs = 2,   mean = 0,   var = 1,   prop.main = 0.5,   corA = NULL,   meanDD = NULL,   varDD = NULL,   prop.mainDD = NULL,   corDD = NULL,   relAA = NULL,   prop.mainAA = NULL,   corAA = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"ntraits Number traits simulated. nenvs Number environments simulated (minimum two). mean vector mean genetic values environment-within-trait combination. one value specified, combinations assigned mean. var vector genetic variances trait. Note: useVarA = TRUE specified `AlphaSimR` (default), values var represent additive genetic variances, otherwise represent total (additive + non-additive) genetic variances. prop.main vector defining proportion main effect variance trait. one value specified, traits assigned proportion. Note: 0 < prop.main < 1. corA matrix additive genetic correlations traits. default, diagonal matrix constructed. meanDD vector mean dominance degrees environment-within-trait combination (similar mean). one value specified, combinations assigned mean. default, meanDD = NULL dominance simulated. varDD vector dominance degree variances trait. prop.mainDD vector defining proportion dominance degree main effect variance trait (similar prop.main). one value specified, traits assigned proportion. Note: 0 < prop.mainDD < 1. corDD matrix dominance degree correlations traits (similar corA). specified dominance simulated, diagonal matrix constructed. relAA vector defining relative magnitude additive--additive (epistatic) variance additive genetic variance trait, diploid organism allele frequency 0.5. one value specified, traits assigned relative magnitude. prop.mainAA vector defining proportion epistatic main effect variance trait (similar prop.main). one value specified, traits assigned proportion. Note: 0 < prop.mainAA < 1. corAA matrix epistatic correlations traits (similar corA). specified epistasis simulated, diagonal matrix constructed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"list input parameters `AlphaSimR`, used simulate   correlated genetic values based compound symmetry model GxE interaction.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"compound symmetry model assumes genetic variance environment genetic covariance pair environments. New functionality implemented relaxes former assumption (also see unstr_asr_output). Note: `AlphaSimR` can simulate different biological effects (see: SimParam). additive traits use addTraitA(). additive + dominance traits use addTraitAD(). additive + epistatic traits use addTraitAE(). additive + dominance + epistatic traits use addTraitADE(). Check useVarA argument functions simulating non-additive traits.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - `AlphaSimR` input parameters — compsym_asr_input","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive + dominance traits # in two environments based on a compound symmetry model.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments  # Additive genetic variances and dominance degree variances. var <- c(0.08, 13) # Different values for Traits 1 and 2 varDD <- 0.2 # Same value for Traits 1 and 2  # Proportion of additive and dominance degree main effect variances. prop.main <- c(0.4, 0.6) # Different values for Traits 1 and 2 prop.mainDD <- 0.4 # Same value for Traits 1 and 2  # Additive and dominance degree correlations between the two simulated traits. corA <- matrix(c(   1.0, 0.5,   0.5, 1.0 ), ncol = 2) corDD <- diag(2) # Assuming independence  input_asr <- compsym_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   prop.main = prop.main,   corA = corA,   meanDD = meanDD,   varDD = varDD,   prop.mainDD = prop.mainDD,   corDD = corDD )"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","text":"Creates data frame simulated genetic values multiple environments one traits based compound symmetry model genotype--environment (GxE) interaction. wrapper function compsym_asr_output() requires `AlphaSimR` population object generated compsym_asr_input.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","text":"","code":"compsym_asr_output(pop, ntraits = 1, nenvs, nreps = 1, return.effects = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","text":"pop `AlphaSimR` population object (Pop-class HybridPop-class) generated compsym_asr_input. ntraits Number traits specified compsym_asr_input. nenvs Number environments specified compsym_asr_input. nreps vector defining number replicates environment. one value specified, environments assigned number. return.effects TRUE (default FALSE), list returned additional entries containing genotype main effects GxE interaction effects trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","text":"data frame columns 'env', genotype 'id', 'rep', followed   simulated genetic values trait. return.effects = TRUE, list returned   additional entries containing genotype main effects GxE interaction effects trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - Simulation with `AlphaSimR` — compsym_asr_output","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive + dominance traits # in two environments based on a compound symmetry model.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments  # Additive genetic variances and dominance degree variances. var <- c(0.08, 13) # Different values for Traits 1 and 2 varDD <- 0.2 # Same value for Traits 1 and 2  # Proportion of additive and dominance degree main effect variances. prop.main <- c(0.4, 0.6) # Different values for Traits 1 and 2 prop.mainDD <- 0.4 # Same value for Traits 1 and 2  # Additive and dominance degree correlations between the two simulated traits. corA <- matrix(c(   1.0, 0.5,   0.5, 1.0 ), ncol = 2) corDD <- diag(2) # Assuming independence  input_asr <- compsym_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   prop.main = prop.main,   corA = corA,   meanDD = meanDD,   varDD = varDD,   prop.mainDD = prop.mainDD,   corDD = corDD )   # 2. Use input_asr to simulate genetic values with 'AlphaSimR' based on a # compound symmetry model.  library(\"AlphaSimR\") #> Loading required package: R6 FOUNDERPOP <- quickHaplo(   nInd = 10,   nChr = 1,   segSites = 20 )  SP <- SimParam$new(FOUNDERPOP)   SP$addTraitAD(   nQtlPerChr = 20,   mean = input_asr$mean,   var = input_asr$var,   corA = input_asr$corA,   meanDD = input_asr$meanDD,   varDD = input_asr$varDD,   corDD = input_asr$corDD,   useVarA = TRUE )  # By default, the variances in 'var' represent additive genetic variances. # When useVarA = FALSE, the values represent total genetic variances.  pop <- newPop(FOUNDERPOP) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found   # 3. Create a data frame with simulated genetic values for the two traits in # the two environments, with two replicates of each genotype.  gv_ls <- compsym_asr_output(   pop = pop,   ntraits = 2,   nenvs = 2,   nreps = 2,   return.effects = TRUE ) #> Error: object 'pop' not found"},{"path":"https://crwerner.github.io/fieldsimr/reference/error_df_bivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot errors - Example data frame — error_df_bivar","title":"Plot errors - Example data frame — error_df_bivar","text":"example data frame simulated plot errors two traits three environments. Environments 1 2 comprise two blocks, Environment 3 comprises three blocks. blocks aligned column direction (side--side) comprise 5 columns 20 rows. data frame generated using function field_trial_error bivariate interpolation. simulation demonstrated vignette Simulation plot errors phenotypes plant breeding field trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/error_df_bivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot errors - Example data frame — error_df_bivar","text":"","code":"error_df_bivar"},{"path":"https://crwerner.github.io/fieldsimr/reference/error_df_bivar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot errors - Example data frame — error_df_bivar","text":"data frame 700 rows 6 columns: env Environment number block Block number col Column number row Row number e.Trait1 Simulated plot errors Trait 1 e.Trait2 Simulated plot errors Trait 2","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate plot errors in plant breeding field trials — field_trial_error","title":"Simulate plot errors in plant breeding field trials — field_trial_error","text":"Creates data frame simulated plot errors multi-environment field trials one traits. plot errors capture spatial trend, random error (noise), extraneous variation. Spatial trend simulated using bivariate interpolation separable first-order autoregressive (AR1) process. Random error simulated using independent process. Extraneous variation simulated using random zig-zag ordering neighbouring columns /rows. three error components combined user-defined ratio.  Correlated plot errors can simulated traits setting different correlation structures error component. separable structure assumed traits plots within environments, different error variances can specified environment-within-trait combination.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate plot errors in plant breeding field trials — field_trial_error","text":"","code":"field_trial_error(   ntraits = 1,   nenvs = 1,   nblocks = 2,   block.dir = \"col\",   ncols = 10,   nrows = 20,   varR = 1,   ScorR = NULL,   RcorR = NULL,   EcorR = NULL,   spatial.model = \"Bivariate\",   complexity = NULL,   plot.length = 8,   plot.width = 2,   col.cor = 0.5,   row.cor = 0.7,   prop.spatial = 0.5,   ext.ord = \"random\",   ext.dir = \"row\",   prop.ext = 0,   return.effects = FALSE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate plot errors in plant breeding field trials — field_trial_error","text":"ntraits Number traits simulated. nenvs Number environments simulated. nblocks vector defining number blocks environment. one value specified, environments assigned number. block.dir vector defining block direction environment. Use 'col' side--side (default), 'row' --, NA one block simulated. one value specified, environments assigned block direction. ncols vector defining number columns environment. one value specified, environments assigned number. nrows vector defining number rows environment. one value specified, environments assigned number. varR vector error variances environment-within-trait combination. one value specified, combinations assigned error variance. ScorR matrix spatial error correlations traits. specified spatial trend simulated, diagonal matrix constructed. RcorR matrix random error correlations traits. specified random error simulated, diagonal matrix constructed. EcorR matrix extraneous error correlations traits. specified extraneous variation simulated, diagonal matrix constructed. Note: correlation traits used column row errors. Currently implemented ext.ord = \"random\". spatial.model character string defining model used simulate spatial trend. Use 'Bivariate' bivariate interpolation (default) 'AR1' separable first-order autoregressive process. Bivariate interpolation implemented interp function R package `interp`. complexity vector defining complexity simulated spatial trend environment spatial.model = \"Bivariate\". one value specified, environments assigned complexity. specified spatial.model = \"Bivariate\", complexity set half maximum number columns rows environment. plot.length vector plot lengths environment (column direction). one value specified, environments assigned plot length. required spatial.model = \"Bivariate\". plot.width vector plot widths environment (row direction). one value specified, environments assigned plot width. required spatial.model = \"Bivariate\". col.cor vector column autocorrelations environment. one value specified, environments assigned column autocorrelation. required spatial.model = \"AR1\". row.cor vector row autocorrelations environment. one value specified, environments assigned row autocorrelation. required spatial.model = \"AR1\". prop.spatial vector defining proportion spatial trend environment-within-trait combination. one value specified, combinations assigned proportion. ext.ord character string defining method used simulate extraneous variation. Use 'random' (default) random variation neighbouring columns /rows 'zig-zag' alternating positive negative values. ext.dir vector defining direction extraneous variation environment. Use 'row' (default) row variation, 'col' column variation, '' variation directions, NA extraneous variation simulated. ext.dir = \"\", half variance assigned columns half assigned rows. one value specified, environments assigned direction. prop.ext vector defining proportion extraneous variation environment-within-trait combination. one value specified, combinations assigned proportion. return.effects TRUE (default FALSE), list returned additional entries containing spatial, random, extraneous error terms trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate plot errors in plant breeding field trials — field_trial_error","text":"data frame columns 'env', 'block', 'col', 'row', followed   simulated plot errors trait. return.effects = TRUE, list returned additional entries   containing spatial, random, extraneous error terms trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate plot errors in plant breeding field trials — field_trial_error","text":"","code":"# Simulate plot errors for two traits in two environments using an AR1 model # for spatial variation.  # Error variances for the four environment-within-trait combinations. varR <- c(0.2, 0.4, 10, 15) # Trait 1 x 2 environments, Trait 2 x 2 environments  # Spatial error correlations between the two simulated traits. ScorR <- matrix(c(   1.0, 0.2,   0.2, 1.0 ), ncol = 2)  error_ls <- field_trial_error(   ntraits = 2,   nenvs = 2,   nblocks = 2,   block.dir = \"row\",   ncols = 10,   nrows = 20,   varR = varR,   ScorR = ScorR,   spatial.model = \"AR1\",   col.cor = 0.5,   row.cor = 0.7,   prop.spatial = 0.4,   ext.ord = \"zig-zag\",   ext.dir = \"row\",   prop.ext = 0.2,   return.effects = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/group_cor_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","title":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","text":"Creates symmetric correlation matrix user-defined structure, rank groupings.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/group_cor_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","text":"","code":"group_cor_mat(   n = c(5, 5),   within.cor = 0.5,   between.cor = 0.2,   range = NULL,   rank = 4,   skew = 0,   pos.def = FALSE,   small.positive = NULL,   return.groups = FALSE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/group_cor_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","text":"n vector defining size group. within.cor vector defining baseline correlation within group. one value supplied, groups assigned correlation. Note: -1 < within.cor < 1. .cor scalar defining baseline correlation groups. Note: .cor <= within.cor. range scalar defining range correlations around baseline. default, range = 1 - max(within.cor) ensures matrix positive semi-definite. Note: max(within.cor) + range <= 1. rank scalar defining rank correlation matrix. skew scalar defining skewness imposed correlations. Note: -1 < skew < 1. pos.def TRUE (default FALSE), function bend R package `mbend` used bend non-positive (semi)-definite matrix positive (semi)-definite. small.positive Argument passed bend pos.def = TRUE (default 1e-8). Eigenvalues smaller small.positive replaced . Note: 0 < small.positive < 0.1. return.groups TRUE (default FALSE), list returned additional entries containing members group.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/group_cor_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","text":"symmetric correlation matrix defined rank groupings.   pos.def = TRUE, correlation matrix guaranteed positive (semi)-definite.   return.groups = TRUE, list returned additional entries containing group members.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/group_cor_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a reduced rank correlation matrix with multiple groups — group_cor_mat","text":"","code":"# Simulate and visualise a correlation matrix with 2 groups containing 5 and 10 members, # correlations of 0.4 within groups and 0 between groups and rank equal to 4 cor_ls <- group_cor_mat(   n = c(5, 10),   within.cor = 0.4,   between.cor = 0,   rank = 4,   return.groups = TRUE )  plot_matrix(   mat = cor_ls$cor.mat,   group.df = cor_ls$group.df,   order = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/gv_df_unstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic values - Example data frame — gv_df_unstr","title":"Genetic values - Example data frame — gv_df_unstr","text":"example data frame simulated genetic values 100 genotypes two traits three environments. Environments 1 2 comprise two replicates genotype, Environment 3 comprises three replicates. data frame generated using wrapper functions unstr_asr_input unstr_asr_output, simulate correlated genetic values `AlphaSimR`. simulation demonstrated vignette Simulation genetic values based unstructured model GxE interaction.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/gv_df_unstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic values - Example data frame — gv_df_unstr","text":"","code":"gv_df_unstr"},{"path":"https://crwerner.github.io/fieldsimr/reference/gv_df_unstr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genetic values - Example data frame — gv_df_unstr","text":"data frame 700 rows 5 columns: env Environment number id Genotype identifier rep Replicate number gv.Trait1 Simulated genetic values Trait 1 gv.Trait2 Simulated genetic values Trait 2","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","title":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","text":"Creates data frame phenotypes combining genetic values plot errors generated function field_trial_error. Requires genetic values generated functions compsym_asr_output unstr_asr_output, data frame matching description .","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","text":"","code":"make_phenotypes(   gv.df,   error.df,   design.df = NULL,   randomise = TRUE,   return.effects = FALSE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","text":"gv.df data frame genetic values. Must contain columns 'env', genotype 'id', 'rep', genetic values trait. error.df data frame plot errors. Must contain columns 'env', 'block', 'col', 'row', plot errors trait. design.df optional data frame frequencies generating incomplete block designs. Must contain columns 'env', 'id', 'nreps' indicating number replicates per individual environment. randomise TRUE (default), genotypes randomly allocated plots according randomized complete (incomplete) block design.Note: experimental designs implemented generated externally. return.effects TRUE (default FALSE), list returned additional entries containing genetic values plot errors trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","text":"data frame columns 'env', 'block', 'column', 'row', genotype 'id', 'rep',   phenotypes trait. return.effects = TRUE, list returned additional   entries containing genetic values plot errors trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate phenotypes - Combine genetic values and plot errors — make_phenotypes","text":"","code":"# Generate and visualise phenotypes by combining the genetic values and plot errors provided # in the two example data frames gv_df_unstr and error_df_bivar.  pheno_ls <- make_phenotypes(   gv.df = gv_df_unstr,   error.df = error_df_bivar,   randomise = TRUE,   return.effects = TRUE )  plot_effects(   df = pheno_ls$pheno.df[pheno_ls$pheno.df$env == 1, ],   effect = \"y.Trait1\",   labels = TRUE, )"},{"path":"https://crwerner.github.io/fieldsimr/reference/measure_variances.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure variances from a covariance matrix — measure_variances","title":"Measure variances from a covariance matrix — measure_variances","text":"Creates table variance components derived user-defined covariance matrix.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/measure_variances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure variances from a covariance matrix — measure_variances","text":"","code":"measure_variances(mat, correction = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/measure_variances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure variances from a covariance matrix — measure_variances","text":"mat symmetric n x n positive (semi)-definite variance matrix. correction TRUE (default FALSE), variance components treated estimates sample corrections applied.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/measure_variances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure variances from a covariance matrix — measure_variances","text":"table partitions total variance main effect interaction variance,   heterogeneity variance lack correlation, non-crossover crossover interaction.   correction = TRUE, sample correction applied variance components.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/measure_variances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure variances from a covariance matrix — measure_variances","text":"","code":"# Generate a structured covariance matrix and then measure the partitioning of variance.  diag_mat <- rand_diag_mat(   n = 10 ) cor_mat <- struc_cor_mat(   n = 10, )  cov_mat <- sqrt(diag_mat) %*% cor_mat %*% sqrt(diag_mat)  measure_variances(   mat = cov_mat ) #>                Component   Variance Proportion #> 1            Main effect 0.24639625 0.50650027 #> 2            Interaction 0.24007189 0.49349973 #> 3 Heterogeniety of scale 0.03018576 0.06205084 #> 4    Lack of correlation 0.20988614 0.43144889 #> 5          Non-crossover 0.26990818 0.55483218 #> 6              Crossover 0.21655996 0.44516782 #> 7                  Total 0.48646814 1.00000000"},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"Creates list input parameters `AlphaSimR` simulate genetic values multiple environments one traits based (reduced rank) multiplicative model genotype--environment (GxE) interaction.  function utilises ability `AlphaSimR` simulate correlated traits. wrapper function multi_asr_input() used specify input parameters required `AlphaSimR`. simulating genetic values, wrapper function multi_asr_output can used generate data frame output values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"","code":"multi_asr_input(   ntraits = 1,   nenvs = 2,   mean = 0,   var = 1,   corA = NULL,   nterms = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"ntraits Number traits simulated. nenvs Number environments simulated (minimum two). mean vector mean genetic values trait environment-within-trait combination. one value specified, combinations assigned mean. var vector additive genetic variances trait environment-within-trait combination. one value specified, combinations assigned variance. corA matrix additive genetic correlations environment-within-trait combinations. default, diagonal matrix constructed. nterms scalar defining number multiplicative terms simulated. default, number terms set number environment-within-trait combinations. Note: nterms less number environment-within-trait combinations, values mean approximated.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"list input parameters `AlphaSimR`, used simulate   correlated genetic values based multiplicative model GxE interaction.   Covariates also supplied use multi_asr_output.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"Currently supports additive traits , (non-additive) traits implemented.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a multiplicative model for GxE interaction - `AlphaSimR` input parameters — multi_asr_input","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive traits in two # environments based on a multiplicative model with three terms.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values. mean <- c(5, 240) # Trait 1, Trait 2  # Additive genetic variances. var <- c(0.086, 0.12, 15.1, 8.5) # Trait 1 x 2 environments, Trait 2 x 2 environments  # Additive genetic correlations between the two simulated traits. TcorA <- matrix(c(   1.0, 0.6,   0.6, 1.0 ), ncol = 2)  # Additive genetic correlations between the two simulated environments. EcorA <- matrix(c(   1.0, 0.2,   0.2, 1.0 ), ncol = 2)  # Construct separable additive genetic correlation matrix. corA <- kronecker(TcorA, EcorA)  input_asr <- multi_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   corA = corA,   nterms = 3 ) #> Warning message:  #>  'nterms' is less than rank of 'corA', 99.79% of variation captured with 3 terms"},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","title":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","text":"Creates data frame simulated genetic values multiple environments one traits based (reduced rank) multiplicative model genotype--environment (GxE) interaction. function requires `AlphaSimR` population object generated multi_asr_input.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","text":"","code":"multi_asr_output(   pop,   ntraits = 1,   nenvs,   nreps = 1,   cov.mat,   return.effects = FALSE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","text":"pop `AlphaSimR` population object (Pop-class HybridPop-class) generated multi_asr_input. ntraits Number traits specified multi_asr_input. nenvs Number environments specified multi_asr_input. nreps vector defining number replicates environment. one value specified, environments assigned number. cov.mat matrix covariates used construct genetic values, typically generated multi_asr_input. return.effects TRUE (default FALSE), list returned additional entries containing genotype slopes multiplicative term.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","text":"data frame columns 'env', genotype 'id', 'rep', followed   simulated genetic values trait. return.effects = TRUE, list returned   additional entries containing genotype slopes multiplicative term.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/multi_asr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a multiplicative model for GxE interaction - Simulation with `AlphaSimR` — multi_asr_output","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive traits in two # environments based on a multiplicative model with three terms.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values. mean <- c(5, 240) # Trait 1, Trait 2  # Additive genetic variances. var <- c(0.086, 0.12, 15.1, 8.5) # Trait 1 x 2 environments, Trait 2 x 2 environments  # Additive genetic correlations between the two simulated traits. TcorA <- matrix(c(   1.0, 0.6,   0.6, 1.0 ), ncol = 2)  # Additive genetic correlations between the two simulated environments. EcorA <- matrix(c(   1.0, 0.2,   0.2, 1.0 ), ncol = 2)  # Construct separable additive genetic correlation matrix corA <- kronecker(TcorA, EcorA)  input_asr <- multi_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   corA = corA,   nterms = 3 ) #> Warning message:  #>  'nterms' is less than rank of 'corA', 99.79% of variation captured with 3 terms   # 2. Use input_asr to simulate genetic values in 'AlphaSimR' based on a # multiplicative model with three terms.  library(\"AlphaSimR\") FOUNDERPOP <- quickHaplo(   nInd = 10,   nChr = 1,   segSites = 20 )  SP <- SimParam$new(FOUNDERPOP)   SP$addTraitA(   nQtlPerChr = 20,   mean = input_asr$mean,   var = input_asr$var,   corA = input_asr$corA )  pop <- newPop(FOUNDERPOP) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found   # 3. Create a data frame with simulated genetic values for the two traits in the two # environments, with two replicates of each genotype.  # The covariates are obtained from input_asr.  gv_ls <- multi_asr_output(   pop = pop,   ntraits = 2,   nenvs = 2,   nreps = 2,   cov.mat = input_asr$cov.mat,   return.effects = TRUE ) #> Error: object 'pop' not found"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphics for plot effects — plot_effects","title":"Graphics for plot effects — plot_effects","text":"Creates graphical field array set plot effects (e.g., phenotypes, genetic values, plot errors). Requires data frame generated functions field_trial_error make_phenotypes, data frame matching description .","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphics for plot effects — plot_effects","text":"","code":"plot_effects(df, effect, blocks = TRUE, labels = TRUE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphics for plot effects — plot_effects","text":"df data frame columns 'col', 'row', effects plotted. effect name effects plotted. blocks TRUE (default), field array split blocks. requires additional column 'block' data frame. labels TRUE (default), column row labels displayed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphics for plot effects — plot_effects","text":"graphical field array x- y-axes displaying column row numbers,  colour gradient ranging red (low value) green (high value).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphics for plot effects — plot_effects","text":"","code":"# Display the simulated plot errors in the example data frame 'error_df_bivar' # for Trait 1 in Environment 1.  error_df <- error_df_bivar[error_df_bivar$env == 1, ]  plot_effects(   df = error_df,   effect = \"e.Trait1\",   labels = TRUE, )"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of values — plot_hist","title":"Histogram of values — plot_hist","text":"Creates histogram user-defined values (e.g., effects, correlations, covariances).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of values — plot_hist","text":"","code":"plot_hist(df, value = NULL, bins = 30, density = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of values — plot_hist","text":"df data frame vector values plotted. value name values plotted. Ignored 'df' vector. bins Argument passed ggplot2 (default 30). Controls number bins histogram. density TRUE (default FALSE), density curve superimposed onto histogram.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of values — plot_hist","text":"histogram x- y-axes displaying values frequency, respectively.   density = TRUE, density curve superimposed onto histogram.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of values — plot_hist","text":"","code":"# Histogram of the simulated plot errors in the example data frame 'error_df_bivar' # for Trait 1 in Environment 1. error_df <- error_df_bivar[error_df_bivar$env == 1, ] plot_hist(   df = error_df,   value = \"e.Trait1\",   density = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphics for matrices — plot_matrix","title":"Graphics for matrices — plot_matrix","text":"Creates heatmap symmetric matrix (e.g., correlation covariance matrix).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphics for matrices — plot_matrix","text":"","code":"plot_matrix(mat, order = FALSE, group.df = NULL, labels = TRUE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphics for matrices — plot_matrix","text":"mat symmetric matrix. order TRUE (default FALSE), function agnes R package `cluster` used default arguments order matrix based dendrogram. group.df optional data frame columns containing variable names followed group numbers. supplied, heatmap split groups ordered (order = TRUE). labels TRUE (default), variable labels displayed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphics for matrices — plot_matrix","text":"heatmap x- y-axes displaying variable numbers,   colour gradient ranging blue (low value) red (high value).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphics for matrices — plot_matrix","text":"","code":"# Display a random correlation matrix.  cor_mat <- rand_cor_mat(   n = 10,   min.cor = -1,   max.cor = 1 )  # Define groups. group_df <- data.frame(variable = 1:10, group = c(1, 1, 1, 1, 2, 2, 2, 3, 3, 4))  plot_matrix(   mat = cor_mat,   group.df = group_df,   order = TRUE,   labels = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q plot — qq_plot","title":"Q-Q plot — qq_plot","text":"Creates normal quantile-quantile (Q-Q) plot set effects (e.g., phenotypes, genetic values, plot errors).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q plot — qq_plot","text":"","code":"qq_plot(df, effect, labels = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q plot — qq_plot","text":"df data frame vector effects plotted. effect name effects plotted. Ignored 'df' vector. labels TRUE (default FALSE), column row labels displayed. requires additional columns 'col' 'row' data frame.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q plot — qq_plot","text":"Q-Q plot x- y-axes displaying theoretical sample quantiles   effects, respectively.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q plot — qq_plot","text":"","code":"# Q-Q plot of the simulated plot errors in the example data frame 'error_df_bivar' # for Trait 1 in Environment 1.  error_df <- error_df_bivar[error_df_bivar$env == 1, ]  qq <- qq_plot(   df = error_df,   effect = \"e.Trait1\",   labels = TRUE )  # Q-Q plot qq   # Extract the data frame with the theoretical and sample quantiles of the # user-defined effects. qq_df <- qq$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a random correlation matrix — rand_cor_mat","title":"Simulate a random correlation matrix — rand_cor_mat","text":"Creates symmetric n x n correlation matrix user-defined minimum maximum correlations based continuous uniform distribution.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a random correlation matrix — rand_cor_mat","text":"","code":"rand_cor_mat(   n = 5,   min.cor = -1,   max.cor = 1,   pos.def = FALSE,   small.positive = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a random correlation matrix — rand_cor_mat","text":"n scalar defining dimensions correlation matrix. min.cor scalar defining minimum correlation. max.cor scalar defining maximum correlation. Note: -1 < min.cor < max.cor < 1. pos.def TRUE (default FALSE), function bend R package `mbend` used bend non-positive (semi)-definite matrix positive (semi)-definite. small.positive Argument passed bend pos.def = TRUE (default 1e-8).  Eigenvalues smaller small.positive replaced . Note: 0 < small.positive < 0.1.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a random correlation matrix — rand_cor_mat","text":"symmetric n x n correlation matrix. pos.def = TRUE, correlation matrix guaranteed positive (semi)-definite.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a random correlation matrix — rand_cor_mat","text":"","code":"# Simulate and visualise a random correlation matrix with 10 columns and rows. cor_mat <- rand_cor_mat(   n = 10,   min.cor = -0.2,   max.cor = 0.8,   pos.def = TRUE ) #> Unweighted bending #> max.iter = 10000 #> small.positive = 1e-08 #> method = hj #> Found a correlation matrix. #> Convergence met after 17 iterations.  plot_matrix(   mat = cor_mat,   order = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_diag_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a random diagonal variance matrix — rand_diag_mat","title":"Simulate a random diagonal variance matrix — rand_diag_mat","text":"Creates diagonal n x n variance matrix user-defined minimum maximum variances based continuous uniform distribution.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_diag_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a random diagonal variance matrix — rand_diag_mat","text":"","code":"rand_diag_mat(n = 5, min.var = 0, max.var = 1)"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_diag_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a random diagonal variance matrix — rand_diag_mat","text":"n scalar defining dimensions variance matrix. min.var scalar defining minimum variance. max.var scalar defining maximum variance. Note: 0 < min.var < max.var.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_diag_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a random diagonal variance matrix — rand_diag_mat","text":"diagonal n x n variance matrix.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_diag_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a random diagonal variance matrix — rand_diag_mat","text":"","code":"# Simulate a random diagonal matrix with 10 columns and rows. diag_mat <- rand_diag_mat(   n = 10,   min.var = 0,   max.var = 0.2 )"},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_met.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample environments from a target population — sample_met","title":"Sample environments from a target population — sample_met","text":"Creates list environments sampled population user-defined sample size.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_met.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample environments from a target population — sample_met","text":"","code":"sample_met(   ntraits = 1,   nenvs = 1000,   nsamples = 10,   sample.size = 20,   replace = TRUE,   cov.mat = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_met.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample environments from a target population — sample_met","text":"ntraits scalar defining number traits. nenvs scalar defining number environments target population. nsamples scalar defining number samples taken. sample.size vector defining number environments sample. one value specified, samples assigned number. replace TRUE (default), samples taken replacement. Ignored nsamples = 1. cov.mat optional matrix environmental covariates one traits. supplied, covariates sampled printed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_met.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample environments from a target population — sample_met","text":"list elements given sample environments taken target population.   cov.mat supplied, additional entries given containing sampled environmental   covariates trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_met.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample environments from a target population — sample_met","text":"","code":"# Sample environments from a target population of 1000, with each sample containing 20 environments. cov_ls <- sample_met(   nenvs = 1000,   nsamples = 10,   sample.size = 20,   replace = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample variogram — sample_variogram","title":"Sample variogram — sample_variogram","text":"Creates sample variogram set effects (e.g., plot errors).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample variogram — sample_variogram","text":"","code":"sample_variogram(df, effect, min.np = 30)"},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample variogram — sample_variogram","text":"df data frame columns 'col', 'row', effects plotted. effect name effects plotted. min.np Minimum number pairs semivariances displayed (default 30).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample variogram — sample_variogram","text":"sample variogram x- y-axes displaying row   column displacements, z-axis displaying average semivariances (variogram ordinates)   effects.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample variogram — sample_variogram","text":"","code":"# Sample variogram of plot errors simulated using a separable first order # autoregressive (AR1) process.  error_df <- field_trial_error(   ntraits = 1,   nenvs = 1,   spatial.model = \"AR1\" )  variogram <- sample_variogram(   df = error_df,   effect = \"e.Trait1\" )  # Sample variogram variogram   # Extract the data frame with the column and row displacements, and the # average semivariances. variogram_df <- variogram$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/skew_diag_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a skewed diagonal variance matrix — skew_diag_mat","title":"Simulate a skewed diagonal variance matrix — skew_diag_mat","text":"Creates diagonal n x n variance matrix user-defined skewness based gamma inverse gamma distribution.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/skew_diag_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a skewed diagonal variance matrix — skew_diag_mat","text":"","code":"skew_diag_mat(n = 5, shape = 1.5, scale = 1, inverse = FALSE, mean.var = NULL)"},{"path":"https://crwerner.github.io/fieldsimr/reference/skew_diag_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a skewed diagonal variance matrix — skew_diag_mat","text":"n scalar defining dimensions variance matrix. shape scalar defining shape distribution. scale scalar defining scale distribution. inverse TRUE (default FALSE), variances sampled inverse gamma distribution instead gamma distribution. mean.var optional scalar defining mean variance. .  supplied, variances scaled achieve defined mean.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/skew_diag_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a skewed diagonal variance matrix — skew_diag_mat","text":"diagonal n x n variance matrix.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/skew_diag_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a skewed diagonal variance matrix — skew_diag_mat","text":"","code":"# Simulate a random diagonal matrix with 10 columns and rows, and negatively skewed variances # scaled to a mean of 0.1. diag_mat <- skew_diag_mat(   n = 10,   shape = 1.5,   scale = 1,   mean.var = 0.1 )"},{"path":"https://crwerner.github.io/fieldsimr/reference/struc_cor_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","title":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","text":"Creates symmetric n x n correlation matrix user-defined structure rank.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/struc_cor_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","text":"","code":"struc_cor_mat(   n = 5,   base.cor = 0.5,   range = NULL,   rank = 3,   skew = 0,   base.mat = NULL,   pos.def = FALSE,   small.positive = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/struc_cor_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","text":"n scalar defining dimensions correlation matrix. base.cor scalar defining baseline correlation. Note: -1 < base.cor < 1. range scalar defining range correlations around baseline. default, range = 1 - base.cor ensures matrix positive semi-definite defined rank. Note: base.cor + range <= 1. rank scalar defining rank correlation matrix. skew scalar defining skewness imposed correlations. Note: -1 < skew < 1. base.mat optional n x n base correlation matrix. supplied, base.cor skew ignored noise simulated based rank. pos.def TRUE (default FALSE), function bend R package `mbend` used bend non-positive (semi)-definite matrix positive (semi)-definite. small.positive Argument passed bend pos.def = TRUE (default 1e-8). Eigenvalues smaller small.positive replaced . Note: 0 < small.positive < 0.1.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/struc_cor_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","text":"symmetric n x n correlation matrix defined rank.   pos.def = TRUE, correlation matrix guaranteed positive (semi)-definite.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/struc_cor_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a structured correlation matrix with reduced rank — struc_cor_mat","text":"","code":"# Simulate and visualise a correlation matrix with 10 columns and rows, rank equal to 4 and # negatively skewed correlations. cor_mat <- struc_cor_mat(   n = 10,   base.cor = 0.3,   range = 0.7,   rank = 4,   skew = -0.5 )  plot_matrix(   mat = cor_mat,   order = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical variogram — theoretical_variogram","title":"Theoretical variogram — theoretical_variogram","text":"Creates theoretical variogram separable first order autoregressive (AR1) process.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical variogram — theoretical_variogram","text":"","code":"theoretical_variogram(   ncols = 10,   nrows = 20,   varR = 1,   col.cor = 0.5,   row.cor = 0.7,   prop.spatial = 1 )"},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical variogram — theoretical_variogram","text":"ncols scalar defining number columns. nrows scalar defining number rows. varR scalar defining error variance. col.cor scalar defining column autocorrelation, row.cor scalar defining row autocorrelation. prop.spatial scalar defining proportion spatial trend.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical variogram — theoretical_variogram","text":"theoretical variogram x- y-axes displaying row column displacements,   z-axis displaying semivariances (variogram ordinates) separable autoregressive process.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical variogram — theoretical_variogram","text":"","code":"# Theoretical variogram for a field trial with 10 columns and 20 rows, based # on column and row autocorrelations of 0.5 and 0.7, and a proportion of # spatial trend of 0.5. The remaining proportion represents random error.  variogram <- theoretical_variogram(   ncols = 10,   nrows = 20,   varR = 1,   col.cor = 0.5,   row.cor = 0.7,   prop.spatial = 0.5 )  # Theoretical variogram variogram   # Extract the data frame with the column and row displacements, and the # theoretical semivariances. variogram_df <- variogram$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"Creates list input parameters `AlphaSimR` simulate genetic values multiple environments one traits based unstructured model genotype--environment (GxE) interaction.  function utilises ability `AlphaSimR` simulate correlated traits. wrapper function unstr_asr_input() used specify input parameters required `AlphaSimR`, can handle separable non-separable structures traits environments (see ). simulating genetic values, wrapper function unstr_asr_output can used generate data frame output values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"","code":"unstr_asr_input(   ntraits = 1,   nenvs = 2,   mean = 0,   var = 1,   Tvar = NULL,   Evar = NULL,   corA = NULL,   TcorA = NULL,   EcorA = NULL,   meanDD = NULL,   varDD = NULL,   TvarDD = NULL,   EvarDD = NULL,   corDD = NULL,   TcorDD = NULL,   EcorDD = NULL,   relAA = NULL,   TrelAA = NULL,   ErelAA = NULL,   corAA = NULL,   TcorAA = NULL,   EcorAA = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"ntraits Number traits simulated. nenvs Number environments simulated (minimum two). mean vector mean genetic values environment-within-trait combination. one value specified, combinations assigned mean. var vector genetic variances environment-within-trait combination. one value specified, combinations assigned variance. Alternatively, separable structure traits environments desired, Tvar Evar can specified. Tvar vector genetic variances trait. Must provided combination Evar. Alternatively, var can specified. Evar vector genetic variances environment. Must provided combination Tvar. Alternatively, var can specified. corA matrix additive genetic correlations environment-within-trait combinations. default, diagonal matrix constructed. Alternatively, TcorA EcorA can specified. TcorA matrix additive genetic correlations traits. Must provided combination EcorA. Alternatively, corA can specified. EcorA matrix additive genetic correlations environments. Must provided combination TcorA. Alternatively, corA can specified. meanDD vector mean dominance degrees environment-within-trait combination (similar mean). one value specified, combinations assigned mean. default, meanDD = NULL dominance simulated. varDD vector dominance degree variances environment-within-trait combination (similar var). one value specified, combinations assigned variance. Alternatively, separable structure traits environments desired, TvarDD EvarDD can specified. TvarDD vector dominance degree variances trait (similar Tvar). Must provided combination EvarDD. Alternatively, varDD can specified. EvarDD vector dominance degree variances environment (similar Evar). Must provided combination TvarDD. Alternatively, varDD can specified. corDD matrix dominance degree correlations environment-within-trait combinations (similar corA). specified dominance simulated, diagonal matrix constructed. Alternatively, TcorDD EcorDD can specified. TcorDD matrix dominance degree correlations traits (similar TcorA). Must provided combination EcorDD. Alternatively, corDD can specified. EcorDD matrix dominance degree correlations environments (similar EcorA). Must provided combination TcorDD. Alternatively, corDD can specified. relAA vector defining relative magnitude additive--additive (epistatic) variance additive genetic variance environment-within-trait combination, diploid organism allele frequency 0.5. one value specified, environment-within-trait combinations assigned value. default, relAA = NULL epistasis simulated. Alternatively, separable structure traits environments desired, TrelAA ErelAA can specified. TrelAA vector defining relative magnitude epistatic variance  additive genetic variance trait. Must provided combination ErelAA. Alternatively, relAA can specified. ErelAA vector defining relative magnitude epistatic variance additive genetic variance environment. Must provided combination TrelAA. Alternatively, relAA can specified. corAA matrix epistatic correlations environment-within-trait combinations (similar corA). specified epistasis simulated, diagonal matrix constructed. Alternatively, TcorAA EcorAA can specified. TcorAA matrix epistatic correlations traits (similar TcorA). Must provided combination EcorAA. Alternatively, corAA can specified. EcorAA matrix epistatic correlations environments (similar EcorA). Must provided combination TcorAA. Alternatively, corAA can specified.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"list input parameters `AlphaSimR`, used simulate   correlated genetic values based unstructured model GxE interaction.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"unstr_asr_input can handle separable non-separable structures traits environments. separable structures, provide (1) Tvar & Evar, (2)   TcorA & EcorA. non-separable structures, provide (1) var, (2) corA. Note: `AlphaSimR` can simulate different biological effects (see: SimParam). additive traits use addTraitA(). additive + dominance traits use addTraitAD(). additive + epistatic traits use addTraitAE(). additive + dominance + epistatic traits use addTraitADE(). Check useVarA argument functions simulating non-additive traits.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on an unstructured model for GxE interaction - `AlphaSimR` input parameters — unstr_asr_input","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive + dominance traits # in two environments based on an unstructured model.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments  # Additive genetic variances and dominance degree variances. var <- c(0.086, 0.12, 15.1, 8.5) # Trait 1 x 2 environments, Trait 2 x 2 environments varDD <- 0.2 # Same value for all environment-within-trait combinations  # Additive genetic correlations between the two simulated traits. TcorA <- matrix(c(   1.0, 0.6,   0.6, 1.0 ), ncol = 2)  # Additive genetic correlations between the two simulated environments. EcorA <- matrix(c(   1.0, 0.2,   0.2, 1.0 ), ncol = 2)  # Dominance degree correlations between the four environment-within-trait combinations. corDD <- diag(4) # Assuming independence  input_asr <- unstr_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   TcorA = TcorA,   EcorA = EcorA,   meanDD = meanDD,   varDD = varDD,   corDD = corDD )"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","title":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","text":"Creates data frame simulated genetic values multiple environments one traits based unstructured model genotype--environment (GxE) interaction. wrapper function unstr_asr_output requires `AlphaSimR` population object generated unstr_asr_input.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","text":"","code":"unstr_asr_output(pop, ntraits = 1, nenvs, nreps = 1)"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","text":"pop `AlphaSimR` population object (Pop-class HybridPop-class) generated unstr_asr_input. ntraits Number simulated traits specified unstr_asr_input. nenvs Number simulated environments specified unstr_asr_input. nreps vector defining number replicates environment. one value specified, environments assigned number.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","text":"data frame columns 'env', genotype 'id', 'rep', followed   simulated genetic values trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on an unstructured model for GxE interaction - Simulation with `AlphaSimR` — unstr_asr_output","text":"","code":"# Simulate genetic values with 'AlphaSimR' for two additive + dominance traits # in two environments based on an unstructured model.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments  # Additive genetic variances and dominance degree variances. var <- c(0.086, 0.12, 15.1, 8.5) # Trait 1 x 2 environments, Trait 2 x 2 environments varDD <- 0.2 # Same value for all environment-within-trait combinations  # Additive genetic correlations between the two simulated traits. TcorA <- matrix(c(   1.0, 0.6,   0.6, 1.0 ), ncol = 2)  # Additive genetic correlations between the two simulated environments. EcorA <- matrix(c(   1.0, 0.2,   0.2, 1.0 ), ncol = 2)  # Dominance degree correlations between the four environment-within-trait combinations. corDD <- diag(4) # Assuming independence  input_asr <- unstr_asr_input(   ntraits = 2,   nenvs = 2,   mean = mean,   var = var,   TcorA = TcorA,   EcorA = EcorA,   meanDD = meanDD,   varDD = varDD,   corDD = corDD )   # 2. Use input_asr to simulate genetic values with 'AlphaSimR' based on an # unstructured model.  library(\"AlphaSimR\") FOUNDERPOP <- quickHaplo(   nInd = 10,   nChr = 1,   segSites = 20 )  SP <- SimParam$new(FOUNDERPOP)   SP$addTraitAD(   nQtlPerChr = 20,   mean = input_asr$mean,   var = input_asr$var,   corA = input_asr$corA,   meanDD = input_asr$meanDD,   varDD = input_asr$varDD,   corDD = input_asr$corDD,   useVarA = TRUE )  # By default, the variances in 'var' represent additive genetic variances. # When useVarA = FALSE, the values represent total genetic variances.  pop <- newPop(FOUNDERPOP) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found   # 3. Create a data frame with simulated genetic values for the two traits in # the two environments, with two replicates of each genotype.  gv_df <- unstr_asr_output(   pop = pop,   ntraits = 2,   nenvs = 2,   nreps = 2 ) #> Error: object 'pop' not found"},{"path":"https://crwerner.github.io/fieldsimr/news/index.html","id":"fieldsimr-110","dir":"Changelog","previous_headings":"","what":"FieldSimR 1.1.0","title":"FieldSimR 1.1.0","text":"CRAN release: 2023-04-12 Added NEWS.md file track changes package. Added argument pos_def function rand_cor_mat make bending non-positive-definite correlation matrix positive-definite matrix optional. Added example data frame df_error_bivar plot errors two traits across three locations generated using field_trial_error. Added example data frame df_gv_unstr simulated genetic values two traits across three environments generated using unstr_asr_input unstr_asr_output. Added functionality simulate extraneous variation field_trial_error. Added internal functions spline_interp fill_matrix interpolate extrapolate missing values NAs remain bivariate interpolation. Added make_phenotypes create phenotypes combination genetic values plot errors. Added qq_plot compare theoretical quantiles normal distribution sample quantiles distribution user-defined effect. Added sample_variogram create variogram user-defined effect. Added theoretical_variogram create theoretical variogram. Added vignette compound_symmetry_GxE_demo demonstrate simulation genetic values using compound symmetry GxE model. Added vignette spatial_error_demo demonstrate simulation plot errors phenotypes multi-environment plant breeding trial. Added vignette unstructured_GxE_demo demonstrate simulation genetic values using unstructured GxE model. Removed argument env function plot_effects. Replaced package fields graphics plot_effects ggplot2. Set complexity argument field_trial_error default maximum number columns rows environment. Updated Description DESCRIPTION.","code":""},{"path":"https://crwerner.github.io/fieldsimr/news/index.html","id":"fieldsimr-120","dir":"Changelog","previous_headings":"","what":"FieldSimR 1.2.0","title":"FieldSimR 1.2.0","text":"CRAN release: 2023-11-03 Argument ext_ord replaced arguments ext_col_cor ext_row_cor function field_trial_error. Factorised argument env, rep id functions field_trial_error, make_phenotypes, unstr_asr_output, compsym_asr_output. Randomisation fixed function make_phenotypes. Changed default parameters col_cor row_cor, prop_spatial, complexity function field_trial_error. Argument plot_labels added function plot_effects. Added function qq_plot create quantile-quantile (Q-Q) plots. Added function sample_variogram create sample variograms. Added function theoretical_variogram create theoretical variograms.","code":""},{"path":"https://crwerner.github.io/fieldsimr/news/index.html","id":"fieldsimr-130","dir":"Changelog","previous_headings":"","what":"FieldSimR 1.3.0","title":"FieldSimR 1.3.0","text":"CRAN release: 2024-04-03 Replaced instances _ . function arguments, e.g., pos.def replaced pos_def. Replaced instances n_ n function arguments, e.g., ntraits replaced n_traits nenvs replaced n_envs. Added multi_asr_input multi_asr_output wrapper functions simulating genetic values based multiplicative model GxE interaction. Added small.positive argument function rand_cor_mat, passed bend function. Updated data frames reflect data used manuscript FieldSimR: R package simulating plot data multi-environment field trials. Changed names example data frames df_error_bivar df_gv_unstr error_df_bivar gv_df_unstr, respectively. Replaced rel.main.eff.prop.main, rel.main.eff.DD prop.mainD, rel.main.eff.AA prop.mainAA compsym_asr_input function, since arguments define proportion main effect variance, relative magnitude. prop.main implemented instead prop.mainA, since argument aligned var, .e., represents proportion additive total main effect variance depending whether useVarA = TRUE FALSE AlphaSimR. Added return.effects argument make_phenotypes function returning plot errors genetic values trait. latter returned randomised order randomise = TRUE. Added functionality plot_effects display factor block, instead numeric column. Added plot_matrix function graphically displaying symmetric matrix, e.g., correlation covariance matrix, similar manner plot_effects function. function allows matrix ordered based dendrogram, split user-defined groups.","code":""},{"path":"https://crwerner.github.io/fieldsimr/news/index.html","id":"fieldsimr-140","dir":"Changelog","previous_headings":"","what":"FieldSimR 1.4.0","title":"FieldSimR 1.4.0","text":"CRAN release: 2024-08-30 Added functionality make_phenotypes function handle incomplete experimental designs new design.df argument, accepts data frame individual x environment frequencies. Added new function struc_cor_mat simulating structured correlation matrices reduced rank. function also handles user-defined base functions. Added new functions rand_diag_mat skew_diag_mat simulating diagonal variance matrices, diagonal elements simulated randomly skewed (gamma inverse gamma) distribution, respectively. Added new function sample_met sampling environments larger population mimic sampling occurs multi-environment trialling. Swapped order rep id arguments compsym_asr_output unstr_asr_output functions Swapped order rep id arguments gv_df_unstr example data frame. Updated colour scheme plot_matrix. Now prints red-blue heatmap correlation matrix supplied, light-dark blue heatmap covariance matrix supplied. Updated qq_plot plot_hist handle matrix input df argument (converts data frame internally). Added new function group_cor_mat simulating structured correlation matrices multiple groups reduced rank.","code":""}]
